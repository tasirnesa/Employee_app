generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< HEAD
  id           Int      @id @default(autoincrement()) @map("Id")
  fullName     String   @map("FullName")
  userName     String   @unique @map("UserName")
  password     String   @map("Password")
  gender       String?  @map("Gender")
  age          Int?     @map("Age")
  status       String   @map("Status") // Changed to String for bit(1)
  role         String   @map("Role")
  locked       String   @map("Locked") // Changed to String for bit(1)
  isFirstLogin String   @map("IsFirstLogin") // Changed to String for bit(1)
  activeStatus String   @map("activeStatus") // Changed to String for bit(1)
  createdDate  DateTime @map("CreatedDate") // Changed to DateTime to support date
  createdBy    Int      @map("CreatedBy")
=======
  id                 Int                 @id @default(autoincrement()) @map("Id")
  fullName           String              @map("FullName")
  userName           String              @unique @map("UserName")
  password           String              @map("Password")
  gender             String?             @map("Gender")
  age                Int?                @map("Age")
  status             String              @map("Status")
  role               String              @map("Role")
  locked             String              @map("Locked")
  isFirstLogin       String              @map("IsFirstLogin")
  activeStatus       String              @map("activeStatus")
  createdDate        DateTime            @map("CreatedDate")
  createdBy          Int                 @map("CreatedBy")
  evaluationsAsEvaluator Evaluation[]    @relation("evaluator")
  evaluationsAsEvaluatee Evaluation[]    @relation("evaluatee")
  goals              Goal[]              @relation("userGoals")
  evaluationSessions EvaluationSession[] @relation("userSessions")
  createdCriteria    EvaluationCriteria[] @relation("creatorCriteria")
>>>>>>> 52ad83bc437906e8444f927e1b189def214b11ed
}

model Evaluation {
  evaluationID   Int      @id @default(autoincrement()) @map("EvaluationID")
  evaluatorID    Int      @map("EvaluatorID")
  evaluateeID    Int      @map("EvaluateeID")
  evaluationType String   @map("EvaluationType")
  sessionID      Int      @map("SessionID")
<<<<<<< HEAD
  evaluationDate DateTime @map("EvaluationDate") // Changed to DateTime to support date
=======
  evaluationDate DateTime @map("EvaluationDate")
  evaluator      User     @relation("evaluator", fields: [evaluatorID], references: [id])
  evaluatee      User     @relation("evaluatee", fields: [evaluateeID], references: [id])
  results        EvaluationResult[]
  session        EvaluationSession @relation(fields: [sessionID], references: [sessionID])
>>>>>>> 52ad83bc437906e8444f927e1b189def214b11ed
}

model EvaluationCriteria {
  criteriaID   Int      @id @default(autoincrement()) @map("CriteriaID")
  title        String   @map("Title")
  description  String?  @map("Description")
  createdBy    Int      @map("CreatedBy")
<<<<<<< HEAD
  createdDate  DateTime @map("CreatedDate") // Added to match database
=======
  createdDate  DateTime @map("CreatedDate")
  results      EvaluationResult[]
  creator      User?    @relation("creatorCriteria", fields: [createdBy], references: [id])
}

model EvaluationSession {
  sessionID    Int      @id @default(autoincrement()) @map("SessionID")
  title        String   @map("Title")
  startDate    DateTime @map("StartDate")
  endDate      DateTime @map("EndDate")
  activatedBy  Int      @map("ActivatedBy")
  type         String   @map("type") @default("")
  evaluations  Evaluation[]
  user         User     @relation("userSessions", fields: [activatedBy], references: [id])
>>>>>>> 52ad83bc437906e8444f927e1b189def214b11ed
}

model EvaluationResult {
  resultID     Int      @id @default(autoincrement()) @map("ResultID")
  evaluationID Int      @map("EvaluationID")
  criteriaID   Int      @map("CriteriaID")
<<<<<<< HEAD
  score        Float    @map("Score") // Changed to Float for double precision
  feedback     String?  @map("Feedback")
}

model EvaluationSession {
  sessionID    Int      @id @default(autoincrement()) @map("SessionID")
  title        String   @map("Title")
  startDate    DateTime @map("StartDate") // Changed to DateTime to support date
  endDate      DateTime @map("EndDate") // Changed to DateTime to support date
  activatedBy  Int      @map("ActivatedBy")
=======
  score        Float    @map("Score")
  feedback     String?  @map("Feedback")
  evaluation   Evaluation @relation(fields: [evaluationID], references: [evaluationID])
  criteria     EvaluationCriteria @relation(fields: [criteriaID], references: [criteriaID])
}

model Goal {
  gid        Int      @id @default(autoincrement())
  objective  String
  keyResult  Json?    @default("[]") // Store array of strings as JSON
  priority   String?
  status     String?
  progress   Int?
  duedate    DateTime?
  category   String?
  activatedBy Int?    @map("ActivatedBy")
  user       User?    @relation(fields: [activatedBy], references: [id], name: "userGoals") // Added name to match

  @@map("Goal")
>>>>>>> 52ad83bc437906e8444f927e1b189def214b11ed
}